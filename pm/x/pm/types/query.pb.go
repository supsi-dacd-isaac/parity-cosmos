// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pm/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetDsoRequest struct {
}

func (m *QueryGetDsoRequest) Reset()         { *m = QueryGetDsoRequest{} }
func (m *QueryGetDsoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDsoRequest) ProtoMessage()    {}
func (*QueryGetDsoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{0}
}
func (m *QueryGetDsoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDsoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDsoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDsoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDsoRequest.Merge(m, src)
}
func (m *QueryGetDsoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDsoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDsoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDsoRequest proto.InternalMessageInfo

type QueryGetDsoResponse struct {
	Dso Dso `protobuf:"bytes,1,opt,name=Dso,proto3" json:"Dso"`
}

func (m *QueryGetDsoResponse) Reset()         { *m = QueryGetDsoResponse{} }
func (m *QueryGetDsoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDsoResponse) ProtoMessage()    {}
func (*QueryGetDsoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{1}
}
func (m *QueryGetDsoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDsoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDsoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDsoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDsoResponse.Merge(m, src)
}
func (m *QueryGetDsoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDsoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDsoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDsoResponse proto.InternalMessageInfo

func (m *QueryGetDsoResponse) GetDso() Dso {
	if m != nil {
		return m.Dso
	}
	return Dso{}
}

type QueryGetAggregatorRequest struct {
}

func (m *QueryGetAggregatorRequest) Reset()         { *m = QueryGetAggregatorRequest{} }
func (m *QueryGetAggregatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAggregatorRequest) ProtoMessage()    {}
func (*QueryGetAggregatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{2}
}
func (m *QueryGetAggregatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAggregatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAggregatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAggregatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAggregatorRequest.Merge(m, src)
}
func (m *QueryGetAggregatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAggregatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAggregatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAggregatorRequest proto.InternalMessageInfo

type QueryGetAggregatorResponse struct {
	Aggregator Aggregator `protobuf:"bytes,1,opt,name=Aggregator,proto3" json:"Aggregator"`
}

func (m *QueryGetAggregatorResponse) Reset()         { *m = QueryGetAggregatorResponse{} }
func (m *QueryGetAggregatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAggregatorResponse) ProtoMessage()    {}
func (*QueryGetAggregatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{3}
}
func (m *QueryGetAggregatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAggregatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAggregatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAggregatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAggregatorResponse.Merge(m, src)
}
func (m *QueryGetAggregatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAggregatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAggregatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAggregatorResponse proto.InternalMessageInfo

func (m *QueryGetAggregatorResponse) GetAggregator() Aggregator {
	if m != nil {
		return m.Aggregator
	}
	return Aggregator{}
}

type QueryGetPlayerRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetPlayerRequest) Reset()         { *m = QueryGetPlayerRequest{} }
func (m *QueryGetPlayerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPlayerRequest) ProtoMessage()    {}
func (*QueryGetPlayerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{4}
}
func (m *QueryGetPlayerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPlayerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPlayerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPlayerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPlayerRequest.Merge(m, src)
}
func (m *QueryGetPlayerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPlayerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPlayerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPlayerRequest proto.InternalMessageInfo

func (m *QueryGetPlayerRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetPlayerResponse struct {
	Player Player `protobuf:"bytes,1,opt,name=player,proto3" json:"player"`
}

func (m *QueryGetPlayerResponse) Reset()         { *m = QueryGetPlayerResponse{} }
func (m *QueryGetPlayerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPlayerResponse) ProtoMessage()    {}
func (*QueryGetPlayerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{5}
}
func (m *QueryGetPlayerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPlayerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPlayerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPlayerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPlayerResponse.Merge(m, src)
}
func (m *QueryGetPlayerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPlayerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPlayerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPlayerResponse proto.InternalMessageInfo

func (m *QueryGetPlayerResponse) GetPlayer() Player {
	if m != nil {
		return m.Player
	}
	return Player{}
}

type QueryAllPlayerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPlayerRequest) Reset()         { *m = QueryAllPlayerRequest{} }
func (m *QueryAllPlayerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPlayerRequest) ProtoMessage()    {}
func (*QueryAllPlayerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{6}
}
func (m *QueryAllPlayerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPlayerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPlayerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPlayerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPlayerRequest.Merge(m, src)
}
func (m *QueryAllPlayerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPlayerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPlayerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPlayerRequest proto.InternalMessageInfo

func (m *QueryAllPlayerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPlayerResponse struct {
	Player     []Player            `protobuf:"bytes,1,rep,name=player,proto3" json:"player"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPlayerResponse) Reset()         { *m = QueryAllPlayerResponse{} }
func (m *QueryAllPlayerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPlayerResponse) ProtoMessage()    {}
func (*QueryAllPlayerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{7}
}
func (m *QueryAllPlayerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPlayerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPlayerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPlayerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPlayerResponse.Merge(m, src)
}
func (m *QueryAllPlayerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPlayerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPlayerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPlayerResponse proto.InternalMessageInfo

func (m *QueryAllPlayerResponse) GetPlayer() []Player {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *QueryAllPlayerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetLemRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetLemRequest) Reset()         { *m = QueryGetLemRequest{} }
func (m *QueryGetLemRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLemRequest) ProtoMessage()    {}
func (*QueryGetLemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{8}
}
func (m *QueryGetLemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLemRequest.Merge(m, src)
}
func (m *QueryGetLemRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLemRequest proto.InternalMessageInfo

func (m *QueryGetLemRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetLemResponse struct {
	Lem Lem `protobuf:"bytes,1,opt,name=lem,proto3" json:"lem"`
}

func (m *QueryGetLemResponse) Reset()         { *m = QueryGetLemResponse{} }
func (m *QueryGetLemResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLemResponse) ProtoMessage()    {}
func (*QueryGetLemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{9}
}
func (m *QueryGetLemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLemResponse.Merge(m, src)
}
func (m *QueryGetLemResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLemResponse proto.InternalMessageInfo

func (m *QueryGetLemResponse) GetLem() Lem {
	if m != nil {
		return m.Lem
	}
	return Lem{}
}

type QueryAllLemRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLemRequest) Reset()         { *m = QueryAllLemRequest{} }
func (m *QueryAllLemRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLemRequest) ProtoMessage()    {}
func (*QueryAllLemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{10}
}
func (m *QueryAllLemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLemRequest.Merge(m, src)
}
func (m *QueryAllLemRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLemRequest proto.InternalMessageInfo

func (m *QueryAllLemRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllLemResponse struct {
	Lem        []Lem               `protobuf:"bytes,1,rep,name=lem,proto3" json:"lem"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLemResponse) Reset()         { *m = QueryAllLemResponse{} }
func (m *QueryAllLemResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLemResponse) ProtoMessage()    {}
func (*QueryAllLemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{11}
}
func (m *QueryAllLemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLemResponse.Merge(m, src)
}
func (m *QueryAllLemResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLemResponse proto.InternalMessageInfo

func (m *QueryAllLemResponse) GetLem() []Lem {
	if m != nil {
		return m.Lem
	}
	return nil
}

func (m *QueryAllLemResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetLemMeasureRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetLemMeasureRequest) Reset()         { *m = QueryGetLemMeasureRequest{} }
func (m *QueryGetLemMeasureRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLemMeasureRequest) ProtoMessage()    {}
func (*QueryGetLemMeasureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{12}
}
func (m *QueryGetLemMeasureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLemMeasureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLemMeasureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLemMeasureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLemMeasureRequest.Merge(m, src)
}
func (m *QueryGetLemMeasureRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLemMeasureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLemMeasureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLemMeasureRequest proto.InternalMessageInfo

func (m *QueryGetLemMeasureRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetLemMeasureResponse struct {
	LemMeasure LemMeasure `protobuf:"bytes,1,opt,name=lemMeasure,proto3" json:"lemMeasure"`
}

func (m *QueryGetLemMeasureResponse) Reset()         { *m = QueryGetLemMeasureResponse{} }
func (m *QueryGetLemMeasureResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLemMeasureResponse) ProtoMessage()    {}
func (*QueryGetLemMeasureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{13}
}
func (m *QueryGetLemMeasureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLemMeasureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLemMeasureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLemMeasureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLemMeasureResponse.Merge(m, src)
}
func (m *QueryGetLemMeasureResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLemMeasureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLemMeasureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLemMeasureResponse proto.InternalMessageInfo

func (m *QueryGetLemMeasureResponse) GetLemMeasure() LemMeasure {
	if m != nil {
		return m.LemMeasure
	}
	return LemMeasure{}
}

type QueryAllLemMeasureRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLemMeasureRequest) Reset()         { *m = QueryAllLemMeasureRequest{} }
func (m *QueryAllLemMeasureRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLemMeasureRequest) ProtoMessage()    {}
func (*QueryAllLemMeasureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{14}
}
func (m *QueryAllLemMeasureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLemMeasureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLemMeasureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLemMeasureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLemMeasureRequest.Merge(m, src)
}
func (m *QueryAllLemMeasureRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLemMeasureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLemMeasureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLemMeasureRequest proto.InternalMessageInfo

func (m *QueryAllLemMeasureRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllLemMeasureResponse struct {
	LemMeasure []LemMeasure        `protobuf:"bytes,1,rep,name=lemMeasure,proto3" json:"lemMeasure"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLemMeasureResponse) Reset()         { *m = QueryAllLemMeasureResponse{} }
func (m *QueryAllLemMeasureResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLemMeasureResponse) ProtoMessage()    {}
func (*QueryAllLemMeasureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{15}
}
func (m *QueryAllLemMeasureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLemMeasureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLemMeasureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLemMeasureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLemMeasureResponse.Merge(m, src)
}
func (m *QueryAllLemMeasureResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLemMeasureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLemMeasureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLemMeasureResponse proto.InternalMessageInfo

func (m *QueryAllLemMeasureResponse) GetLemMeasure() []LemMeasure {
	if m != nil {
		return m.LemMeasure
	}
	return nil
}

func (m *QueryAllLemMeasureResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSlaRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetSlaRequest) Reset()         { *m = QueryGetSlaRequest{} }
func (m *QueryGetSlaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSlaRequest) ProtoMessage()    {}
func (*QueryGetSlaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{16}
}
func (m *QueryGetSlaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSlaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSlaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSlaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSlaRequest.Merge(m, src)
}
func (m *QueryGetSlaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSlaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSlaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSlaRequest proto.InternalMessageInfo

func (m *QueryGetSlaRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetSlaResponse struct {
	Sla Sla `protobuf:"bytes,1,opt,name=sla,proto3" json:"sla"`
}

func (m *QueryGetSlaResponse) Reset()         { *m = QueryGetSlaResponse{} }
func (m *QueryGetSlaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSlaResponse) ProtoMessage()    {}
func (*QueryGetSlaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{17}
}
func (m *QueryGetSlaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSlaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSlaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSlaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSlaResponse.Merge(m, src)
}
func (m *QueryGetSlaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSlaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSlaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSlaResponse proto.InternalMessageInfo

func (m *QueryGetSlaResponse) GetSla() Sla {
	if m != nil {
		return m.Sla
	}
	return Sla{}
}

type QueryAllSlaRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSlaRequest) Reset()         { *m = QueryAllSlaRequest{} }
func (m *QueryAllSlaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSlaRequest) ProtoMessage()    {}
func (*QueryAllSlaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{18}
}
func (m *QueryAllSlaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSlaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSlaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSlaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSlaRequest.Merge(m, src)
}
func (m *QueryAllSlaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSlaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSlaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSlaRequest proto.InternalMessageInfo

func (m *QueryAllSlaRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSlaResponse struct {
	Sla        []Sla               `protobuf:"bytes,1,rep,name=sla,proto3" json:"sla"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSlaResponse) Reset()         { *m = QueryAllSlaResponse{} }
func (m *QueryAllSlaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSlaResponse) ProtoMessage()    {}
func (*QueryAllSlaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{19}
}
func (m *QueryAllSlaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSlaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSlaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSlaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSlaResponse.Merge(m, src)
}
func (m *QueryAllSlaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSlaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSlaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSlaResponse proto.InternalMessageInfo

func (m *QueryAllSlaResponse) GetSla() []Sla {
	if m != nil {
		return m.Sla
	}
	return nil
}

func (m *QueryAllSlaResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetKpiRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetKpiRequest) Reset()         { *m = QueryGetKpiRequest{} }
func (m *QueryGetKpiRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetKpiRequest) ProtoMessage()    {}
func (*QueryGetKpiRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{20}
}
func (m *QueryGetKpiRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKpiRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKpiRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKpiRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKpiRequest.Merge(m, src)
}
func (m *QueryGetKpiRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKpiRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKpiRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKpiRequest proto.InternalMessageInfo

func (m *QueryGetKpiRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetKpiResponse struct {
	Kpi Kpi `protobuf:"bytes,1,opt,name=kpi,proto3" json:"kpi"`
}

func (m *QueryGetKpiResponse) Reset()         { *m = QueryGetKpiResponse{} }
func (m *QueryGetKpiResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetKpiResponse) ProtoMessage()    {}
func (*QueryGetKpiResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{21}
}
func (m *QueryGetKpiResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKpiResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKpiResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKpiResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKpiResponse.Merge(m, src)
}
func (m *QueryGetKpiResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKpiResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKpiResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKpiResponse proto.InternalMessageInfo

func (m *QueryGetKpiResponse) GetKpi() Kpi {
	if m != nil {
		return m.Kpi
	}
	return Kpi{}
}

type QueryAllKpiRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllKpiRequest) Reset()         { *m = QueryAllKpiRequest{} }
func (m *QueryAllKpiRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllKpiRequest) ProtoMessage()    {}
func (*QueryAllKpiRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{22}
}
func (m *QueryAllKpiRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllKpiRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllKpiRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllKpiRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllKpiRequest.Merge(m, src)
}
func (m *QueryAllKpiRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllKpiRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllKpiRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllKpiRequest proto.InternalMessageInfo

func (m *QueryAllKpiRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllKpiResponse struct {
	Kpi        []Kpi               `protobuf:"bytes,1,rep,name=kpi,proto3" json:"kpi"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllKpiResponse) Reset()         { *m = QueryAllKpiResponse{} }
func (m *QueryAllKpiResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllKpiResponse) ProtoMessage()    {}
func (*QueryAllKpiResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{23}
}
func (m *QueryAllKpiResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllKpiResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllKpiResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllKpiResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllKpiResponse.Merge(m, src)
}
func (m *QueryAllKpiResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllKpiResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllKpiResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllKpiResponse proto.InternalMessageInfo

func (m *QueryAllKpiResponse) GetKpi() []Kpi {
	if m != nil {
		return m.Kpi
	}
	return nil
}

func (m *QueryAllKpiResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetKpiMeasureRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetKpiMeasureRequest) Reset()         { *m = QueryGetKpiMeasureRequest{} }
func (m *QueryGetKpiMeasureRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetKpiMeasureRequest) ProtoMessage()    {}
func (*QueryGetKpiMeasureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{24}
}
func (m *QueryGetKpiMeasureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKpiMeasureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKpiMeasureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKpiMeasureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKpiMeasureRequest.Merge(m, src)
}
func (m *QueryGetKpiMeasureRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKpiMeasureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKpiMeasureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKpiMeasureRequest proto.InternalMessageInfo

func (m *QueryGetKpiMeasureRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetKpiMeasureResponse struct {
	KpiMeasure KpiMeasure `protobuf:"bytes,1,opt,name=kpiMeasure,proto3" json:"kpiMeasure"`
}

func (m *QueryGetKpiMeasureResponse) Reset()         { *m = QueryGetKpiMeasureResponse{} }
func (m *QueryGetKpiMeasureResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetKpiMeasureResponse) ProtoMessage()    {}
func (*QueryGetKpiMeasureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{25}
}
func (m *QueryGetKpiMeasureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKpiMeasureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKpiMeasureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKpiMeasureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKpiMeasureResponse.Merge(m, src)
}
func (m *QueryGetKpiMeasureResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKpiMeasureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKpiMeasureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKpiMeasureResponse proto.InternalMessageInfo

func (m *QueryGetKpiMeasureResponse) GetKpiMeasure() KpiMeasure {
	if m != nil {
		return m.KpiMeasure
	}
	return KpiMeasure{}
}

type QueryAllKpiMeasureRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllKpiMeasureRequest) Reset()         { *m = QueryAllKpiMeasureRequest{} }
func (m *QueryAllKpiMeasureRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllKpiMeasureRequest) ProtoMessage()    {}
func (*QueryAllKpiMeasureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{26}
}
func (m *QueryAllKpiMeasureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllKpiMeasureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllKpiMeasureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllKpiMeasureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllKpiMeasureRequest.Merge(m, src)
}
func (m *QueryAllKpiMeasureRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllKpiMeasureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllKpiMeasureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllKpiMeasureRequest proto.InternalMessageInfo

func (m *QueryAllKpiMeasureRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllKpiMeasureResponse struct {
	KpiMeasure []KpiMeasure        `protobuf:"bytes,1,rep,name=kpiMeasure,proto3" json:"kpiMeasure"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllKpiMeasureResponse) Reset()         { *m = QueryAllKpiMeasureResponse{} }
func (m *QueryAllKpiMeasureResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllKpiMeasureResponse) ProtoMessage()    {}
func (*QueryAllKpiMeasureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{27}
}
func (m *QueryAllKpiMeasureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllKpiMeasureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllKpiMeasureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllKpiMeasureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllKpiMeasureResponse.Merge(m, src)
}
func (m *QueryAllKpiMeasureResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllKpiMeasureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllKpiMeasureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllKpiMeasureResponse proto.InternalMessageInfo

func (m *QueryAllKpiMeasureResponse) GetKpiMeasure() []KpiMeasure {
	if m != nil {
		return m.KpiMeasure
	}
	return nil
}

func (m *QueryAllKpiMeasureResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetLemDatasetRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetLemDatasetRequest) Reset()         { *m = QueryGetLemDatasetRequest{} }
func (m *QueryGetLemDatasetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLemDatasetRequest) ProtoMessage()    {}
func (*QueryGetLemDatasetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{28}
}
func (m *QueryGetLemDatasetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLemDatasetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLemDatasetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLemDatasetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLemDatasetRequest.Merge(m, src)
}
func (m *QueryGetLemDatasetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLemDatasetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLemDatasetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLemDatasetRequest proto.InternalMessageInfo

func (m *QueryGetLemDatasetRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetLemDatasetResponse struct {
	LemDataset LemDataset `protobuf:"bytes,1,opt,name=lemDataset,proto3" json:"lemDataset"`
}

func (m *QueryGetLemDatasetResponse) Reset()         { *m = QueryGetLemDatasetResponse{} }
func (m *QueryGetLemDatasetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLemDatasetResponse) ProtoMessage()    {}
func (*QueryGetLemDatasetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{29}
}
func (m *QueryGetLemDatasetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLemDatasetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLemDatasetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLemDatasetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLemDatasetResponse.Merge(m, src)
}
func (m *QueryGetLemDatasetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLemDatasetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLemDatasetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLemDatasetResponse proto.InternalMessageInfo

func (m *QueryGetLemDatasetResponse) GetLemDataset() LemDataset {
	if m != nil {
		return m.LemDataset
	}
	return LemDataset{}
}

type QueryAllLemDatasetRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLemDatasetRequest) Reset()         { *m = QueryAllLemDatasetRequest{} }
func (m *QueryAllLemDatasetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLemDatasetRequest) ProtoMessage()    {}
func (*QueryAllLemDatasetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{30}
}
func (m *QueryAllLemDatasetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLemDatasetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLemDatasetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLemDatasetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLemDatasetRequest.Merge(m, src)
}
func (m *QueryAllLemDatasetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLemDatasetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLemDatasetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLemDatasetRequest proto.InternalMessageInfo

func (m *QueryAllLemDatasetRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllLemDatasetResponse struct {
	LemDataset []LemDataset        `protobuf:"bytes,1,rep,name=lemDataset,proto3" json:"lemDataset"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLemDatasetResponse) Reset()         { *m = QueryAllLemDatasetResponse{} }
func (m *QueryAllLemDatasetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLemDatasetResponse) ProtoMessage()    {}
func (*QueryAllLemDatasetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf833bf452d8635e, []int{31}
}
func (m *QueryAllLemDatasetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLemDatasetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLemDatasetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLemDatasetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLemDatasetResponse.Merge(m, src)
}
func (m *QueryAllLemDatasetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLemDatasetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLemDatasetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLemDatasetResponse proto.InternalMessageInfo

func (m *QueryAllLemDatasetResponse) GetLemDataset() []LemDataset {
	if m != nil {
		return m.LemDataset
	}
	return nil
}

func (m *QueryAllLemDatasetResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetDsoRequest)(nil), "supsidacdisaac.pm.pm.QueryGetDsoRequest")
	proto.RegisterType((*QueryGetDsoResponse)(nil), "supsidacdisaac.pm.pm.QueryGetDsoResponse")
	proto.RegisterType((*QueryGetAggregatorRequest)(nil), "supsidacdisaac.pm.pm.QueryGetAggregatorRequest")
	proto.RegisterType((*QueryGetAggregatorResponse)(nil), "supsidacdisaac.pm.pm.QueryGetAggregatorResponse")
	proto.RegisterType((*QueryGetPlayerRequest)(nil), "supsidacdisaac.pm.pm.QueryGetPlayerRequest")
	proto.RegisterType((*QueryGetPlayerResponse)(nil), "supsidacdisaac.pm.pm.QueryGetPlayerResponse")
	proto.RegisterType((*QueryAllPlayerRequest)(nil), "supsidacdisaac.pm.pm.QueryAllPlayerRequest")
	proto.RegisterType((*QueryAllPlayerResponse)(nil), "supsidacdisaac.pm.pm.QueryAllPlayerResponse")
	proto.RegisterType((*QueryGetLemRequest)(nil), "supsidacdisaac.pm.pm.QueryGetLemRequest")
	proto.RegisterType((*QueryGetLemResponse)(nil), "supsidacdisaac.pm.pm.QueryGetLemResponse")
	proto.RegisterType((*QueryAllLemRequest)(nil), "supsidacdisaac.pm.pm.QueryAllLemRequest")
	proto.RegisterType((*QueryAllLemResponse)(nil), "supsidacdisaac.pm.pm.QueryAllLemResponse")
	proto.RegisterType((*QueryGetLemMeasureRequest)(nil), "supsidacdisaac.pm.pm.QueryGetLemMeasureRequest")
	proto.RegisterType((*QueryGetLemMeasureResponse)(nil), "supsidacdisaac.pm.pm.QueryGetLemMeasureResponse")
	proto.RegisterType((*QueryAllLemMeasureRequest)(nil), "supsidacdisaac.pm.pm.QueryAllLemMeasureRequest")
	proto.RegisterType((*QueryAllLemMeasureResponse)(nil), "supsidacdisaac.pm.pm.QueryAllLemMeasureResponse")
	proto.RegisterType((*QueryGetSlaRequest)(nil), "supsidacdisaac.pm.pm.QueryGetSlaRequest")
	proto.RegisterType((*QueryGetSlaResponse)(nil), "supsidacdisaac.pm.pm.QueryGetSlaResponse")
	proto.RegisterType((*QueryAllSlaRequest)(nil), "supsidacdisaac.pm.pm.QueryAllSlaRequest")
	proto.RegisterType((*QueryAllSlaResponse)(nil), "supsidacdisaac.pm.pm.QueryAllSlaResponse")
	proto.RegisterType((*QueryGetKpiRequest)(nil), "supsidacdisaac.pm.pm.QueryGetKpiRequest")
	proto.RegisterType((*QueryGetKpiResponse)(nil), "supsidacdisaac.pm.pm.QueryGetKpiResponse")
	proto.RegisterType((*QueryAllKpiRequest)(nil), "supsidacdisaac.pm.pm.QueryAllKpiRequest")
	proto.RegisterType((*QueryAllKpiResponse)(nil), "supsidacdisaac.pm.pm.QueryAllKpiResponse")
	proto.RegisterType((*QueryGetKpiMeasureRequest)(nil), "supsidacdisaac.pm.pm.QueryGetKpiMeasureRequest")
	proto.RegisterType((*QueryGetKpiMeasureResponse)(nil), "supsidacdisaac.pm.pm.QueryGetKpiMeasureResponse")
	proto.RegisterType((*QueryAllKpiMeasureRequest)(nil), "supsidacdisaac.pm.pm.QueryAllKpiMeasureRequest")
	proto.RegisterType((*QueryAllKpiMeasureResponse)(nil), "supsidacdisaac.pm.pm.QueryAllKpiMeasureResponse")
	proto.RegisterType((*QueryGetLemDatasetRequest)(nil), "supsidacdisaac.pm.pm.QueryGetLemDatasetRequest")
	proto.RegisterType((*QueryGetLemDatasetResponse)(nil), "supsidacdisaac.pm.pm.QueryGetLemDatasetResponse")
	proto.RegisterType((*QueryAllLemDatasetRequest)(nil), "supsidacdisaac.pm.pm.QueryAllLemDatasetRequest")
	proto.RegisterType((*QueryAllLemDatasetResponse)(nil), "supsidacdisaac.pm.pm.QueryAllLemDatasetResponse")
}

func init() { proto.RegisterFile("pm/query.proto", fileDescriptor_cf833bf452d8635e) }

var fileDescriptor_cf833bf452d8635e = []byte{
	// 1126 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x98, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xc7, 0xe3, 0x9a, 0x46, 0xea, 0xf0, 0x4b, 0x9a, 0x06, 0x44, 0xb7, 0x65, 0x89, 0x5c, 0x08,
	0x21, 0x6d, 0x6c, 0x12, 0x0e, 0x48, 0xdc, 0x82, 0xa2, 0x16, 0x69, 0x17, 0xa9, 0x4d, 0x38, 0x21,
	0xa4, 0x6a, 0xb2, 0x3b, 0x32, 0xa3, 0x9d, 0x59, 0x4f, 0x77, 0xbc, 0xa8, 0x11, 0x42, 0x48, 0xbd,
	0x70, 0x43, 0xa0, 0x1e, 0x11, 0x5c, 0x38, 0xf3, 0x7f, 0xf4, 0x46, 0x25, 0x2e, 0x9c, 0x10, 0x4a,
	0xf8, 0x43, 0x90, 0x67, 0xc6, 0x3b, 0x63, 0xaf, 0xe3, 0x99, 0x8d, 0x76, 0x2f, 0xd1, 0x7a, 0xf2,
	0xde, 0xbc, 0xcf, 0x3c, 0xbf, 0xf7, 0xfc, 0xb5, 0xc1, 0x6b, 0x9c, 0x25, 0x8f, 0xa7, 0x78, 0x72,
	0x1a, 0xf3, 0x49, 0x96, 0x67, 0x70, 0x43, 0x4c, 0xb9, 0x20, 0x43, 0x34, 0x18, 0x12, 0x81, 0xd0,
	0x20, 0xe6, 0x2c, 0xe6, 0xac, 0x73, 0x2b, 0xcd, 0xb2, 0x94, 0xe2, 0x04, 0x71, 0x92, 0xa0, 0xf1,
	0x38, 0xcb, 0x51, 0x4e, 0xb2, 0xb1, 0x50, 0x3e, 0x9d, 0x9d, 0x41, 0x26, 0x58, 0x26, 0x92, 0x13,
	0x24, 0xb0, 0xda, 0x2c, 0xf9, 0x66, 0xef, 0x04, 0xe7, 0x68, 0x2f, 0xe1, 0x28, 0x25, 0x63, 0x69,
	0xac, 0x6d, 0x5f, 0xe1, 0x2c, 0x19, 0x8a, 0x4c, 0x5f, 0x5d, 0xe7, 0x2c, 0x41, 0x69, 0x3a, 0xc1,
	0x29, 0xca, 0xb3, 0x89, 0x5e, 0x7c, 0x9d, 0xb3, 0x84, 0x53, 0x74, 0x8a, 0x27, 0x96, 0x0f, 0xc5,
	0x4c, 0x5f, 0x6d, 0xa8, 0xab, 0x47, 0x0c, 0x23, 0x31, 0x9d, 0x60, 0xcb, 0x46, 0x50, 0x64, 0x5d,
	0x8d, 0x38, 0xb1, 0x3c, 0x46, 0x9c, 0xd4, 0x3c, 0xca, 0x7d, 0x86, 0x28, 0x47, 0x02, 0xe7, 0xe5,
	0x6a, 0x9a, 0xa5, 0x99, 0xfc, 0x99, 0x14, 0xbf, 0xd4, 0x6a, 0xb4, 0x01, 0xe0, 0xc3, 0xe2, 0x5c,
	0xf7, 0x71, 0x7e, 0x28, 0xb2, 0x23, 0xfc, 0x78, 0x8a, 0x45, 0x1e, 0x7d, 0x06, 0xae, 0x57, 0x56,
	0x05, 0xcf, 0xc6, 0x02, 0xc3, 0x3d, 0x10, 0x1e, 0x8a, 0xec, 0xad, 0x60, 0x33, 0xd8, 0x7e, 0x79,
	0xff, 0x46, 0xdc, 0x94, 0xd0, 0xf8, 0x50, 0x64, 0x9f, 0xbe, 0xf4, 0xfc, 0x9f, 0x77, 0xd6, 0x8e,
	0x0a, 0xdb, 0xe8, 0x26, 0xb8, 0x51, 0xee, 0x74, 0x30, 0x4b, 0x47, 0x19, 0x66, 0x08, 0x3a, 0x4d,
	0xff, 0xd4, 0xd1, 0xee, 0x01, 0x60, 0x56, 0x75, 0xd0, 0xcd, 0xe6, 0xa0, 0xc6, 0x4e, 0xc7, 0xb6,
	0x3c, 0xa3, 0x5d, 0xf0, 0x46, 0x19, 0xe5, 0x81, 0x4c, 0xbe, 0x0e, 0x0f, 0x37, 0xc0, 0x55, 0x32,
	0x1e, 0xe2, 0x27, 0x72, 0xef, 0x6b, 0x47, 0xea, 0x22, 0xfa, 0x02, 0xbc, 0x59, 0x37, 0xd7, 0x40,
	0x9f, 0x80, 0x75, 0x75, 0xf7, 0x34, 0xcc, 0xad, 0x66, 0x18, 0xe5, 0xa5, 0x41, 0xb4, 0x47, 0xf4,
	0x48, 0x43, 0x1c, 0x50, 0x5a, 0x85, 0xb8, 0x07, 0x80, 0x29, 0x25, 0xbd, 0xf1, 0x56, 0xac, 0xea,
	0x2e, 0x2e, 0xea, 0x2e, 0x56, 0x45, 0xac, 0xeb, 0x2e, 0x7e, 0x80, 0x52, 0xac, 0x7d, 0x8f, 0x2c,
	0xcf, 0xe8, 0xd7, 0x40, 0x73, 0x5b, 0x11, 0x1a, 0xb8, 0xc3, 0xc5, 0xb8, 0xe1, 0xfd, 0x0a, 0xde,
	0x15, 0x89, 0xf7, 0xbe, 0x13, 0x4f, 0x05, 0xae, 0xf0, 0xed, 0x98, 0x42, 0xeb, 0x63, 0xd6, 0x7e,
	0x0b, 0xac, 0xf2, 0x93, 0xb6, 0xa6, 0xfc, 0x28, 0x66, 0xed, 0xe5, 0xd7, 0xc7, 0xac, 0x2c, 0x3f,
	0x8a, 0x59, 0xf4, 0x95, 0x8e, 0x7a, 0x40, 0xa9, 0x15, 0x75, 0x59, 0x39, 0xff, 0x39, 0xd0, 0xa0,
	0xe5, 0xf6, 0x75, 0xd0, 0xd0, 0x17, 0x74, 0x79, 0x79, 0xde, 0x33, 0x0d, 0xd7, 0xc7, 0xec, 0x73,
	0x35, 0x18, 0xda, 0xd3, 0x6d, 0xb5, 0xa1, 0xed, 0x62, 0xda, 0x90, 0xce, 0x56, 0xdb, 0xdb, 0xd0,
	0x78, 0x97, 0x6d, 0x68, 0x3c, 0xa3, 0x81, 0x06, 0x53, 0xb9, 0xaa, 0x81, 0x2d, 0xeb, 0x8e, 0xfc,
	0x11, 0xe8, 0xb3, 0xd4, 0xa2, 0x5c, 0x70, 0x96, 0xf0, 0x72, 0x67, 0x59, 0x49, 0x57, 0x1c, 0x53,
	0xe4, 0xdd, 0x15, 0xd2, 0xd6, 0x14, 0x9b, 0xa0, 0xa8, 0xbd, 0x2b, 0x8e, 0x29, 0x2a, 0x8b, 0x4d,
	0x50, 0x64, 0x77, 0x85, 0x15, 0x75, 0x15, 0x5d, 0xd1, 0x08, 0x1a, 0xfa, 0x82, 0xae, 0x24, 0xcf,
	0x3d, 0x4e, 0xbc, 0xf3, 0x2c, 0x6d, 0x0d, 0xfe, 0x88, 0x93, 0xf6, 0x3c, 0xf7, 0x38, 0x29, 0xf1,
	0x47, 0x9c, 0xd8, 0x79, 0xb6, 0xa2, 0xae, 0x22, 0xcf, 0x8d, 0xa0, 0xa1, 0x2f, 0xe8, 0x4a, 0xa6,
	0x4f, 0x8f, 0x93, 0x45, 0xa7, 0x8f, 0xed, 0x62, 0x3a, 0x76, 0x34, 0x5b, 0x6d, 0x9f, 0x3e, 0xc6,
	0xbb, 0xec, 0x58, 0xe3, 0x69, 0x4f, 0x9f, 0x79, 0xb0, 0x55, 0x4c, 0x1f, 0x8f, 0xb3, 0x84, 0x97,
	0x3b, 0xcb, 0xaa, 0x9e, 0x15, 0x87, 0x4a, 0x2e, 0x2e, 0xf2, 0xac, 0x98, 0xb9, 0x54, 0xe6, 0xab,
	0x5e, 0x75, 0x3e, 0x2b, 0xb4, 0x9d, 0x35, 0x5f, 0xf5, 0x4a, 0xed, 0x59, 0x51, 0x03, 0x5b, 0xd1,
	0xb3, 0xc2, 0x75, 0x96, 0xf0, 0x72, 0x67, 0x59, 0xda, 0xdd, 0xda, 0xff, 0x13, 0x82, 0xab, 0x92,
	0x17, 0x7e, 0x2f, 0x75, 0x38, 0xdc, 0x6e, 0xa6, 0x99, 0xd7, 0xf3, 0x9d, 0x0f, 0x3c, 0x2c, 0x55,
	0xc4, 0xe8, 0xf6, 0xd3, 0xbf, 0xfe, 0x7b, 0x76, 0xe5, 0x6d, 0x78, 0x33, 0x91, 0x2e, 0xbb, 0x85,
	0xcf, 0xae, 0x74, 0x4a, 0x8a, 0xb7, 0x17, 0xf9, 0x8e, 0x03, 0x7f, 0x09, 0x6c, 0x6d, 0x0e, 0x93,
	0xf6, 0xed, 0xe7, 0x84, 0x7f, 0xe7, 0x43, 0x7f, 0x07, 0x8d, 0xb5, 0x23, 0xb1, 0xde, 0x85, 0xd1,
	0x45, 0x58, 0xe6, 0x65, 0x0b, 0x3e, 0x0b, 0xc0, 0xba, 0x12, 0xb3, 0xf0, 0x4e, 0x7b, 0xa0, 0x8a,
	0x14, 0xef, 0xdc, 0xf5, 0x33, 0xd6, 0x44, 0xb1, 0x24, 0xda, 0x86, 0x5b, 0x17, 0x11, 0x29, 0x05,
	0x9d, 0x7c, 0x2b, 0x1b, 0xe7, 0x3b, 0xf8, 0x63, 0x00, 0xae, 0xa9, 0x2d, 0x0e, 0x28, 0x6d, 0x05,
	0xab, 0xbf, 0x23, 0xb4, 0x82, 0xcd, 0xc9, 0xfd, 0x68, 0x4b, 0x82, 0x6d, 0xc2, 0x6e, 0x3b, 0x18,
	0xfc, 0x21, 0x00, 0x61, 0x1f, 0x33, 0x57, 0x19, 0x19, 0xdd, 0xec, 0x2a, 0x23, 0x4b, 0x02, 0x47,
	0x77, 0x24, 0xc4, 0x7b, 0xf0, 0xf6, 0x45, 0x10, 0x14, 0xb3, 0x59, 0x6a, 0x9e, 0x06, 0x60, 0xbd,
	0x8f, 0x59, 0x91, 0x97, 0xed, 0xf6, 0xa3, 0x7a, 0xc2, 0x54, 0xf5, 0xb8, 0xbb, 0xa6, 0x0b, 0x05,
	0xfe, 0x7b, 0x00, 0x80, 0x11, 0x7d, 0xae, 0x9a, 0x9e, 0x93, 0xb0, 0xae, 0x9a, 0x9e, 0x57, 0xa3,
	0xd1, 0xbe, 0xc4, 0xba, 0x0b, 0x77, 0x5a, 0xb0, 0xb4, 0xcf, 0x2c, 0x55, 0xbf, 0x05, 0xe0, 0x55,
	0xb3, 0x55, 0x91, 0xb1, 0xc4, 0x99, 0x87, 0x05, 0x40, 0x1b, 0x65, 0xb3, 0xbb, 0xf9, 0x2c, 0x69,
	0x5c, 0x54, 0xd5, 0x31, 0x45, 0xae, 0xaa, 0x32, 0xba, 0xd3, 0x55, 0x55, 0x96, 0x84, 0x74, 0x57,
	0x95, 0xa0, 0xa8, 0x52, 0x55, 0xc7, 0x14, 0x79, 0x54, 0x95, 0x27, 0x4c, 0x55, 0xcf, 0xba, 0xab,
	0xaa, 0x50, 0xb0, 0x45, 0x3a, 0x7a, 0x9c, 0xb8, 0xd2, 0x61, 0xe4, 0xa1, 0x2b, 0x1d, 0x96, 0xd2,
	0x73, 0xa7, 0x63, 0xc4, 0x49, 0x25, 0x1d, 0x3d, 0x4e, 0x3c, 0xd2, 0xe1, 0x09, 0x53, 0x95, 0x9d,
	0xee, 0x74, 0x14, 0x42, 0xb3, 0x68, 0x32, 0xa3, 0x6d, 0x5c, 0x4d, 0x36, 0xa7, 0xd4, 0x5c, 0x4d,
	0x36, 0x2f, 0xba, 0xdc, 0x4d, 0x66, 0x84, 0x55, 0xa5, 0xc9, 0xcc, 0x56, 0x1e, 0x4d, 0xb6, 0x18,
	0x68, 0xa3, 0x3a, 0x74, 0x37, 0x99, 0xa5, 0x00, 0xf5, 0xac, 0x2a, 0x25, 0x86, 0x7b, 0x56, 0x55,
	0x25, 0x94, 0xc7, 0xac, 0xaa, 0xa9, 0x21, 0xaf, 0x59, 0xa5, 0x7d, 0xea, 0xb3, 0x4a, 0x2f, 0xfb,
	0xcd, 0xaa, 0x05, 0x40, 0x1b, 0x65, 0x9b, 0xd7, 0xac, 0x2a, 0xc5, 0xda, 0xc3, 0xe7, 0x67, 0xdd,
	0xe0, 0xc5, 0x59, 0x37, 0xf8, 0xf7, 0xac, 0x1b, 0xfc, 0x74, 0xde, 0x5d, 0x7b, 0x71, 0xde, 0x5d,
	0xfb, 0xfb, 0xbc, 0xbb, 0xf6, 0xe5, 0xc7, 0x29, 0xc9, 0xbf, 0x9e, 0x9e, 0xc4, 0x83, 0x8c, 0x35,
	0xec, 0x83, 0x26, 0x24, 0x3f, 0xdd, 0xd5, 0xdf, 0x86, 0x39, 0x4b, 0x9e, 0x14, 0x7f, 0xf2, 0x53,
	0x8e, 0xc5, 0xc9, 0xba, 0xfc, 0xac, 0xfa, 0xd1, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x8f,
	0x3b, 0x22, 0x7e, 0x16, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a dso by index.
	Dso(ctx context.Context, in *QueryGetDsoRequest, opts ...grpc.CallOption) (*QueryGetDsoResponse, error)
	// Queries a aggregator by index.
	Aggregator(ctx context.Context, in *QueryGetAggregatorRequest, opts ...grpc.CallOption) (*QueryGetAggregatorResponse, error)
	// Queries a player by index.
	Player(ctx context.Context, in *QueryGetPlayerRequest, opts ...grpc.CallOption) (*QueryGetPlayerResponse, error)
	// Queries a list of player items.
	PlayerAll(ctx context.Context, in *QueryAllPlayerRequest, opts ...grpc.CallOption) (*QueryAllPlayerResponse, error)
	// Queries a lem by index.
	Lem(ctx context.Context, in *QueryGetLemRequest, opts ...grpc.CallOption) (*QueryGetLemResponse, error)
	// Queries a list of lem items.
	LemAll(ctx context.Context, in *QueryAllLemRequest, opts ...grpc.CallOption) (*QueryAllLemResponse, error)
	// Queries a lemMeasure by index.
	LemMeasure(ctx context.Context, in *QueryGetLemMeasureRequest, opts ...grpc.CallOption) (*QueryGetLemMeasureResponse, error)
	// Queries a list of lemMeasure items.
	LemMeasureAll(ctx context.Context, in *QueryAllLemMeasureRequest, opts ...grpc.CallOption) (*QueryAllLemMeasureResponse, error)
	// Queries a sla by index.
	Sla(ctx context.Context, in *QueryGetSlaRequest, opts ...grpc.CallOption) (*QueryGetSlaResponse, error)
	// Queries a list of sla items.
	SlaAll(ctx context.Context, in *QueryAllSlaRequest, opts ...grpc.CallOption) (*QueryAllSlaResponse, error)
	// Queries a kpi by index.
	Kpi(ctx context.Context, in *QueryGetKpiRequest, opts ...grpc.CallOption) (*QueryGetKpiResponse, error)
	// Queries a list of kpi items.
	KpiAll(ctx context.Context, in *QueryAllKpiRequest, opts ...grpc.CallOption) (*QueryAllKpiResponse, error)
	// Queries a kpiMeasure by index.
	KpiMeasure(ctx context.Context, in *QueryGetKpiMeasureRequest, opts ...grpc.CallOption) (*QueryGetKpiMeasureResponse, error)
	// Queries a list of kpiMeasure items.
	KpiMeasureAll(ctx context.Context, in *QueryAllKpiMeasureRequest, opts ...grpc.CallOption) (*QueryAllKpiMeasureResponse, error)
	// Queries a lemDataset by index.
	LemDataset(ctx context.Context, in *QueryGetLemDatasetRequest, opts ...grpc.CallOption) (*QueryGetLemDatasetResponse, error)
	// Queries a list of lemDataset items.
	LemDatasetAll(ctx context.Context, in *QueryAllLemDatasetRequest, opts ...grpc.CallOption) (*QueryAllLemDatasetResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Dso(ctx context.Context, in *QueryGetDsoRequest, opts ...grpc.CallOption) (*QueryGetDsoResponse, error) {
	out := new(QueryGetDsoResponse)
	err := c.cc.Invoke(ctx, "/supsidacdisaac.pm.pm.Query/Dso", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Aggregator(ctx context.Context, in *QueryGetAggregatorRequest, opts ...grpc.CallOption) (*QueryGetAggregatorResponse, error) {
	out := new(QueryGetAggregatorResponse)
	err := c.cc.Invoke(ctx, "/supsidacdisaac.pm.pm.Query/Aggregator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Player(ctx context.Context, in *QueryGetPlayerRequest, opts ...grpc.CallOption) (*QueryGetPlayerResponse, error) {
	out := new(QueryGetPlayerResponse)
	err := c.cc.Invoke(ctx, "/supsidacdisaac.pm.pm.Query/Player", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PlayerAll(ctx context.Context, in *QueryAllPlayerRequest, opts ...grpc.CallOption) (*QueryAllPlayerResponse, error) {
	out := new(QueryAllPlayerResponse)
	err := c.cc.Invoke(ctx, "/supsidacdisaac.pm.pm.Query/PlayerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Lem(ctx context.Context, in *QueryGetLemRequest, opts ...grpc.CallOption) (*QueryGetLemResponse, error) {
	out := new(QueryGetLemResponse)
	err := c.cc.Invoke(ctx, "/supsidacdisaac.pm.pm.Query/Lem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LemAll(ctx context.Context, in *QueryAllLemRequest, opts ...grpc.CallOption) (*QueryAllLemResponse, error) {
	out := new(QueryAllLemResponse)
	err := c.cc.Invoke(ctx, "/supsidacdisaac.pm.pm.Query/LemAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LemMeasure(ctx context.Context, in *QueryGetLemMeasureRequest, opts ...grpc.CallOption) (*QueryGetLemMeasureResponse, error) {
	out := new(QueryGetLemMeasureResponse)
	err := c.cc.Invoke(ctx, "/supsidacdisaac.pm.pm.Query/LemMeasure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LemMeasureAll(ctx context.Context, in *QueryAllLemMeasureRequest, opts ...grpc.CallOption) (*QueryAllLemMeasureResponse, error) {
	out := new(QueryAllLemMeasureResponse)
	err := c.cc.Invoke(ctx, "/supsidacdisaac.pm.pm.Query/LemMeasureAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Sla(ctx context.Context, in *QueryGetSlaRequest, opts ...grpc.CallOption) (*QueryGetSlaResponse, error) {
	out := new(QueryGetSlaResponse)
	err := c.cc.Invoke(ctx, "/supsidacdisaac.pm.pm.Query/Sla", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SlaAll(ctx context.Context, in *QueryAllSlaRequest, opts ...grpc.CallOption) (*QueryAllSlaResponse, error) {
	out := new(QueryAllSlaResponse)
	err := c.cc.Invoke(ctx, "/supsidacdisaac.pm.pm.Query/SlaAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Kpi(ctx context.Context, in *QueryGetKpiRequest, opts ...grpc.CallOption) (*QueryGetKpiResponse, error) {
	out := new(QueryGetKpiResponse)
	err := c.cc.Invoke(ctx, "/supsidacdisaac.pm.pm.Query/Kpi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KpiAll(ctx context.Context, in *QueryAllKpiRequest, opts ...grpc.CallOption) (*QueryAllKpiResponse, error) {
	out := new(QueryAllKpiResponse)
	err := c.cc.Invoke(ctx, "/supsidacdisaac.pm.pm.Query/KpiAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KpiMeasure(ctx context.Context, in *QueryGetKpiMeasureRequest, opts ...grpc.CallOption) (*QueryGetKpiMeasureResponse, error) {
	out := new(QueryGetKpiMeasureResponse)
	err := c.cc.Invoke(ctx, "/supsidacdisaac.pm.pm.Query/KpiMeasure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KpiMeasureAll(ctx context.Context, in *QueryAllKpiMeasureRequest, opts ...grpc.CallOption) (*QueryAllKpiMeasureResponse, error) {
	out := new(QueryAllKpiMeasureResponse)
	err := c.cc.Invoke(ctx, "/supsidacdisaac.pm.pm.Query/KpiMeasureAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LemDataset(ctx context.Context, in *QueryGetLemDatasetRequest, opts ...grpc.CallOption) (*QueryGetLemDatasetResponse, error) {
	out := new(QueryGetLemDatasetResponse)
	err := c.cc.Invoke(ctx, "/supsidacdisaac.pm.pm.Query/LemDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LemDatasetAll(ctx context.Context, in *QueryAllLemDatasetRequest, opts ...grpc.CallOption) (*QueryAllLemDatasetResponse, error) {
	out := new(QueryAllLemDatasetResponse)
	err := c.cc.Invoke(ctx, "/supsidacdisaac.pm.pm.Query/LemDatasetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a dso by index.
	Dso(context.Context, *QueryGetDsoRequest) (*QueryGetDsoResponse, error)
	// Queries a aggregator by index.
	Aggregator(context.Context, *QueryGetAggregatorRequest) (*QueryGetAggregatorResponse, error)
	// Queries a player by index.
	Player(context.Context, *QueryGetPlayerRequest) (*QueryGetPlayerResponse, error)
	// Queries a list of player items.
	PlayerAll(context.Context, *QueryAllPlayerRequest) (*QueryAllPlayerResponse, error)
	// Queries a lem by index.
	Lem(context.Context, *QueryGetLemRequest) (*QueryGetLemResponse, error)
	// Queries a list of lem items.
	LemAll(context.Context, *QueryAllLemRequest) (*QueryAllLemResponse, error)
	// Queries a lemMeasure by index.
	LemMeasure(context.Context, *QueryGetLemMeasureRequest) (*QueryGetLemMeasureResponse, error)
	// Queries a list of lemMeasure items.
	LemMeasureAll(context.Context, *QueryAllLemMeasureRequest) (*QueryAllLemMeasureResponse, error)
	// Queries a sla by index.
	Sla(context.Context, *QueryGetSlaRequest) (*QueryGetSlaResponse, error)
	// Queries a list of sla items.
	SlaAll(context.Context, *QueryAllSlaRequest) (*QueryAllSlaResponse, error)
	// Queries a kpi by index.
	Kpi(context.Context, *QueryGetKpiRequest) (*QueryGetKpiResponse, error)
	// Queries a list of kpi items.
	KpiAll(context.Context, *QueryAllKpiRequest) (*QueryAllKpiResponse, error)
	// Queries a kpiMeasure by index.
	KpiMeasure(context.Context, *QueryGetKpiMeasureRequest) (*QueryGetKpiMeasureResponse, error)
	// Queries a list of kpiMeasure items.
	KpiMeasureAll(context.Context, *QueryAllKpiMeasureRequest) (*QueryAllKpiMeasureResponse, error)
	// Queries a lemDataset by index.
	LemDataset(context.Context, *QueryGetLemDatasetRequest) (*QueryGetLemDatasetResponse, error)
	// Queries a list of lemDataset items.
	LemDatasetAll(context.Context, *QueryAllLemDatasetRequest) (*QueryAllLemDatasetResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Dso(ctx context.Context, req *QueryGetDsoRequest) (*QueryGetDsoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dso not implemented")
}
func (*UnimplementedQueryServer) Aggregator(ctx context.Context, req *QueryGetAggregatorRequest) (*QueryGetAggregatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Aggregator not implemented")
}
func (*UnimplementedQueryServer) Player(ctx context.Context, req *QueryGetPlayerRequest) (*QueryGetPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Player not implemented")
}
func (*UnimplementedQueryServer) PlayerAll(ctx context.Context, req *QueryAllPlayerRequest) (*QueryAllPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerAll not implemented")
}
func (*UnimplementedQueryServer) Lem(ctx context.Context, req *QueryGetLemRequest) (*QueryGetLemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lem not implemented")
}
func (*UnimplementedQueryServer) LemAll(ctx context.Context, req *QueryAllLemRequest) (*QueryAllLemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LemAll not implemented")
}
func (*UnimplementedQueryServer) LemMeasure(ctx context.Context, req *QueryGetLemMeasureRequest) (*QueryGetLemMeasureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LemMeasure not implemented")
}
func (*UnimplementedQueryServer) LemMeasureAll(ctx context.Context, req *QueryAllLemMeasureRequest) (*QueryAllLemMeasureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LemMeasureAll not implemented")
}
func (*UnimplementedQueryServer) Sla(ctx context.Context, req *QueryGetSlaRequest) (*QueryGetSlaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sla not implemented")
}
func (*UnimplementedQueryServer) SlaAll(ctx context.Context, req *QueryAllSlaRequest) (*QueryAllSlaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlaAll not implemented")
}
func (*UnimplementedQueryServer) Kpi(ctx context.Context, req *QueryGetKpiRequest) (*QueryGetKpiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kpi not implemented")
}
func (*UnimplementedQueryServer) KpiAll(ctx context.Context, req *QueryAllKpiRequest) (*QueryAllKpiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KpiAll not implemented")
}
func (*UnimplementedQueryServer) KpiMeasure(ctx context.Context, req *QueryGetKpiMeasureRequest) (*QueryGetKpiMeasureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KpiMeasure not implemented")
}
func (*UnimplementedQueryServer) KpiMeasureAll(ctx context.Context, req *QueryAllKpiMeasureRequest) (*QueryAllKpiMeasureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KpiMeasureAll not implemented")
}
func (*UnimplementedQueryServer) LemDataset(ctx context.Context, req *QueryGetLemDatasetRequest) (*QueryGetLemDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LemDataset not implemented")
}
func (*UnimplementedQueryServer) LemDatasetAll(ctx context.Context, req *QueryAllLemDatasetRequest) (*QueryAllLemDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LemDatasetAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Dso_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDsoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Dso(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supsidacdisaac.pm.pm.Query/Dso",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Dso(ctx, req.(*QueryGetDsoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Aggregator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAggregatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Aggregator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supsidacdisaac.pm.pm.Query/Aggregator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Aggregator(ctx, req.(*QueryGetAggregatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Player_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Player(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supsidacdisaac.pm.pm.Query/Player",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Player(ctx, req.(*QueryGetPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PlayerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PlayerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supsidacdisaac.pm.pm.Query/PlayerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PlayerAll(ctx, req.(*QueryAllPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Lem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Lem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supsidacdisaac.pm.pm.Query/Lem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Lem(ctx, req.(*QueryGetLemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LemAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LemAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supsidacdisaac.pm.pm.Query/LemAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LemAll(ctx, req.(*QueryAllLemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LemMeasure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLemMeasureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LemMeasure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supsidacdisaac.pm.pm.Query/LemMeasure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LemMeasure(ctx, req.(*QueryGetLemMeasureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LemMeasureAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLemMeasureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LemMeasureAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supsidacdisaac.pm.pm.Query/LemMeasureAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LemMeasureAll(ctx, req.(*QueryAllLemMeasureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Sla_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSlaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Sla(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supsidacdisaac.pm.pm.Query/Sla",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Sla(ctx, req.(*QueryGetSlaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SlaAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSlaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SlaAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supsidacdisaac.pm.pm.Query/SlaAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SlaAll(ctx, req.(*QueryAllSlaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Kpi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetKpiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Kpi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supsidacdisaac.pm.pm.Query/Kpi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Kpi(ctx, req.(*QueryGetKpiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KpiAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllKpiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KpiAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supsidacdisaac.pm.pm.Query/KpiAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KpiAll(ctx, req.(*QueryAllKpiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KpiMeasure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetKpiMeasureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KpiMeasure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supsidacdisaac.pm.pm.Query/KpiMeasure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KpiMeasure(ctx, req.(*QueryGetKpiMeasureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KpiMeasureAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllKpiMeasureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KpiMeasureAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supsidacdisaac.pm.pm.Query/KpiMeasureAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KpiMeasureAll(ctx, req.(*QueryAllKpiMeasureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LemDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLemDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LemDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supsidacdisaac.pm.pm.Query/LemDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LemDataset(ctx, req.(*QueryGetLemDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LemDatasetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLemDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LemDatasetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supsidacdisaac.pm.pm.Query/LemDatasetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LemDatasetAll(ctx, req.(*QueryAllLemDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "supsidacdisaac.pm.pm.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dso",
			Handler:    _Query_Dso_Handler,
		},
		{
			MethodName: "Aggregator",
			Handler:    _Query_Aggregator_Handler,
		},
		{
			MethodName: "Player",
			Handler:    _Query_Player_Handler,
		},
		{
			MethodName: "PlayerAll",
			Handler:    _Query_PlayerAll_Handler,
		},
		{
			MethodName: "Lem",
			Handler:    _Query_Lem_Handler,
		},
		{
			MethodName: "LemAll",
			Handler:    _Query_LemAll_Handler,
		},
		{
			MethodName: "LemMeasure",
			Handler:    _Query_LemMeasure_Handler,
		},
		{
			MethodName: "LemMeasureAll",
			Handler:    _Query_LemMeasureAll_Handler,
		},
		{
			MethodName: "Sla",
			Handler:    _Query_Sla_Handler,
		},
		{
			MethodName: "SlaAll",
			Handler:    _Query_SlaAll_Handler,
		},
		{
			MethodName: "Kpi",
			Handler:    _Query_Kpi_Handler,
		},
		{
			MethodName: "KpiAll",
			Handler:    _Query_KpiAll_Handler,
		},
		{
			MethodName: "KpiMeasure",
			Handler:    _Query_KpiMeasure_Handler,
		},
		{
			MethodName: "KpiMeasureAll",
			Handler:    _Query_KpiMeasureAll_Handler,
		},
		{
			MethodName: "LemDataset",
			Handler:    _Query_LemDataset_Handler,
		},
		{
			MethodName: "LemDatasetAll",
			Handler:    _Query_LemDatasetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pm/query.proto",
}

func (m *QueryGetDsoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDsoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDsoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetDsoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDsoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDsoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Dso.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAggregatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAggregatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAggregatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetAggregatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAggregatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAggregatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Aggregator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetPlayerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPlayerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPlayerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPlayerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPlayerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPlayerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Player.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPlayerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPlayerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPlayerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPlayerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPlayerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPlayerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Player) > 0 {
		for iNdEx := len(m.Player) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Player[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Lem.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllLemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Lem) > 0 {
		for iNdEx := len(m.Lem) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Lem[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLemMeasureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLemMeasureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLemMeasureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLemMeasureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLemMeasureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLemMeasureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LemMeasure.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllLemMeasureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLemMeasureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLemMeasureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLemMeasureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLemMeasureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLemMeasureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LemMeasure) > 0 {
		for iNdEx := len(m.LemMeasure) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LemMeasure[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSlaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSlaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSlaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSlaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSlaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSlaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Sla.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSlaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSlaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSlaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSlaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSlaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSlaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sla) > 0 {
		for iNdEx := len(m.Sla) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sla[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetKpiRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKpiRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKpiRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetKpiResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKpiResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKpiResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Kpi.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllKpiRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllKpiRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllKpiRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllKpiResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllKpiResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllKpiResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Kpi) > 0 {
		for iNdEx := len(m.Kpi) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Kpi[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetKpiMeasureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKpiMeasureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKpiMeasureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetKpiMeasureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKpiMeasureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKpiMeasureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.KpiMeasure.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllKpiMeasureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllKpiMeasureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllKpiMeasureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllKpiMeasureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllKpiMeasureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllKpiMeasureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.KpiMeasure) > 0 {
		for iNdEx := len(m.KpiMeasure) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KpiMeasure[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLemDatasetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLemDatasetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLemDatasetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLemDatasetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLemDatasetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLemDatasetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LemDataset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllLemDatasetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLemDatasetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLemDatasetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLemDatasetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLemDatasetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLemDatasetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LemDataset) > 0 {
		for iNdEx := len(m.LemDataset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LemDataset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetDsoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetDsoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Dso.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAggregatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetAggregatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Aggregator.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetPlayerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPlayerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Player.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPlayerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPlayerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Player) > 0 {
		for _, e := range m.Player {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Lem.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllLemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Lem) > 0 {
		for _, e := range m.Lem {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLemMeasureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLemMeasureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LemMeasure.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllLemMeasureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLemMeasureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LemMeasure) > 0 {
		for _, e := range m.LemMeasure {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSlaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSlaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Sla.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSlaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSlaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sla) > 0 {
		for _, e := range m.Sla {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetKpiRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetKpiResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Kpi.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllKpiRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllKpiResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Kpi) > 0 {
		for _, e := range m.Kpi {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetKpiMeasureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetKpiMeasureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.KpiMeasure.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllKpiMeasureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllKpiMeasureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KpiMeasure) > 0 {
		for _, e := range m.KpiMeasure {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLemDatasetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLemDatasetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LemDataset.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllLemDatasetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLemDatasetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LemDataset) > 0 {
		for _, e := range m.LemDataset {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetDsoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDsoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDsoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDsoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDsoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDsoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dso", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Dso.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAggregatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAggregatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAggregatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAggregatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAggregatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAggregatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Aggregator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPlayerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPlayerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPlayerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPlayerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPlayerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPlayerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPlayerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPlayerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPlayerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPlayerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPlayerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPlayerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Player = append(m.Player, Player{})
			if err := m.Player[len(m.Player)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Lem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lem = append(m.Lem, Lem{})
			if err := m.Lem[len(m.Lem)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLemMeasureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLemMeasureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLemMeasureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLemMeasureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLemMeasureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLemMeasureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LemMeasure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LemMeasure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLemMeasureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLemMeasureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLemMeasureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLemMeasureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLemMeasureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLemMeasureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LemMeasure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LemMeasure = append(m.LemMeasure, LemMeasure{})
			if err := m.LemMeasure[len(m.LemMeasure)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSlaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSlaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSlaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSlaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSlaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSlaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sla", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sla.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSlaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSlaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSlaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSlaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSlaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSlaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sla", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sla = append(m.Sla, Sla{})
			if err := m.Sla[len(m.Sla)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKpiRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKpiRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKpiRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKpiResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKpiResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKpiResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kpi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Kpi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllKpiRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllKpiRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllKpiRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllKpiResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllKpiResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllKpiResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kpi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kpi = append(m.Kpi, Kpi{})
			if err := m.Kpi[len(m.Kpi)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKpiMeasureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKpiMeasureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKpiMeasureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKpiMeasureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKpiMeasureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKpiMeasureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KpiMeasure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KpiMeasure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllKpiMeasureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllKpiMeasureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllKpiMeasureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllKpiMeasureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllKpiMeasureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllKpiMeasureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KpiMeasure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KpiMeasure = append(m.KpiMeasure, KpiMeasure{})
			if err := m.KpiMeasure[len(m.KpiMeasure)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLemDatasetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLemDatasetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLemDatasetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLemDatasetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLemDatasetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLemDatasetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LemDataset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LemDataset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLemDatasetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLemDatasetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLemDatasetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLemDatasetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLemDatasetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLemDatasetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LemDataset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LemDataset = append(m.LemDataset, LemDataset{})
			if err := m.LemDataset[len(m.LemDataset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
