// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pm/lem_dataset.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LemDataset struct {
	Index         string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Player        string `protobuf:"bytes,2,opt,name=player,proto3" json:"player,omitempty"`
	Timestamp     int32  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PconsMeasure  string `protobuf:"bytes,4,opt,name=pconsMeasure,proto3" json:"pconsMeasure,omitempty"`
	PprodMeasure  string `protobuf:"bytes,5,opt,name=pprodMeasure,proto3" json:"pprodMeasure,omitempty"`
	PconsForecast string `protobuf:"bytes,6,opt,name=pconsForecast,proto3" json:"pconsForecast,omitempty"`
	PprodForecast string `protobuf:"bytes,7,opt,name=pprodForecast,proto3" json:"pprodForecast,omitempty"`
	Creator       string `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *LemDataset) Reset()         { *m = LemDataset{} }
func (m *LemDataset) String() string { return proto.CompactTextString(m) }
func (*LemDataset) ProtoMessage()    {}
func (*LemDataset) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6efc27caa109ddb, []int{0}
}
func (m *LemDataset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LemDataset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LemDataset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LemDataset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LemDataset.Merge(m, src)
}
func (m *LemDataset) XXX_Size() int {
	return m.Size()
}
func (m *LemDataset) XXX_DiscardUnknown() {
	xxx_messageInfo_LemDataset.DiscardUnknown(m)
}

var xxx_messageInfo_LemDataset proto.InternalMessageInfo

func (m *LemDataset) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *LemDataset) GetPlayer() string {
	if m != nil {
		return m.Player
	}
	return ""
}

func (m *LemDataset) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *LemDataset) GetPconsMeasure() string {
	if m != nil {
		return m.PconsMeasure
	}
	return ""
}

func (m *LemDataset) GetPprodMeasure() string {
	if m != nil {
		return m.PprodMeasure
	}
	return ""
}

func (m *LemDataset) GetPconsForecast() string {
	if m != nil {
		return m.PconsForecast
	}
	return ""
}

func (m *LemDataset) GetPprodForecast() string {
	if m != nil {
		return m.PprodForecast
	}
	return ""
}

func (m *LemDataset) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*LemDataset)(nil), "supsidacdisaac.pm.pm.LemDataset")
}

func init() { proto.RegisterFile("pm/lem_dataset.proto", fileDescriptor_e6efc27caa109ddb) }

var fileDescriptor_e6efc27caa109ddb = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x14, 0x45, 0xeb, 0x42, 0x53, 0x6a, 0xc1, 0x62, 0x45, 0xc8, 0x03, 0xb2, 0xaa, 0x8a, 0xa1, 0x4b,
	0x92, 0x81, 0x81, 0x1d, 0x21, 0x26, 0x18, 0xe8, 0xc8, 0x82, 0x5c, 0xc7, 0x02, 0x4b, 0x75, 0xfd,
	0xe4, 0xe7, 0x48, 0xcd, 0x0f, 0x30, 0xf3, 0x59, 0x8c, 0x1d, 0x19, 0x51, 0xf2, 0x23, 0x28, 0x6e,
	0x0a, 0xed, 0xf2, 0xa4, 0x7b, 0xde, 0xb9, 0xcb, 0xa5, 0x29, 0xd8, 0x62, 0xa5, 0xed, 0x6b, 0x29,
	0x83, 0x44, 0x1d, 0x72, 0xf0, 0x2e, 0x38, 0x96, 0x62, 0x05, 0x68, 0x4a, 0xa9, 0x4a, 0x83, 0x52,
	0xaa, 0x1c, 0x6c, 0x0e, 0x76, 0xf6, 0x31, 0xa4, 0xf4, 0x51, 0xdb, 0xfb, 0x9d, 0xca, 0x52, 0x3a,
	0x32, 0xeb, 0x52, 0x6f, 0x38, 0x99, 0x92, 0xf9, 0x64, 0xb1, 0x0b, 0xec, 0x92, 0x26, 0xb0, 0x92,
	0xb5, 0xf6, 0x7c, 0x18, 0x71, 0x9f, 0xd8, 0x15, 0x9d, 0x04, 0x63, 0x35, 0x06, 0x69, 0x81, 0x9f,
	0x4c, 0xc9, 0x7c, 0xb4, 0xf8, 0x07, 0x6c, 0x46, 0xcf, 0x41, 0xb9, 0x35, 0x3e, 0x69, 0x89, 0x95,
	0xd7, 0xfc, 0x34, 0x76, 0x8f, 0x58, 0x74, 0xc0, 0xbb, 0x72, 0xef, 0x8c, 0x7a, 0xe7, 0x80, 0xb1,
	0x6b, 0x7a, 0x11, 0x3b, 0x0f, 0xce, 0x6b, 0x25, 0x31, 0xf0, 0x24, 0x4a, 0xc7, 0x30, 0x5a, 0x5d,
	0xeb, 0xcf, 0x1a, 0xf7, 0xd6, 0x21, 0x64, 0x9c, 0x8e, 0x95, 0xd7, 0x32, 0x38, 0xcf, 0xcf, 0xe2,
	0x7f, 0x1f, 0xef, 0x9e, 0xbf, 0x1a, 0x41, 0xb6, 0x8d, 0x20, 0x3f, 0x8d, 0x20, 0x9f, 0xad, 0x18,
	0x6c, 0x5b, 0x31, 0xf8, 0x6e, 0xc5, 0xe0, 0xe5, 0xf6, 0xcd, 0x84, 0xf7, 0x6a, 0x99, 0x2b, 0x67,
	0x8b, 0xb8, 0x61, 0xd6, 0x8d, 0x98, 0xc5, 0x15, 0x0b, 0x90, 0xde, 0x84, 0x3a, 0x53, 0x0e, 0xad,
	0xc3, 0x02, 0x6c, 0xb1, 0xe9, 0x4e, 0xa8, 0x41, 0xe3, 0x32, 0x89, 0xc3, 0xdf, 0xfc, 0x06, 0x00,
	0x00, 0xff, 0xff, 0xa0, 0x65, 0xa4, 0xc6, 0x90, 0x01, 0x00, 0x00,
}

func (m *LemDataset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LemDataset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LemDataset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintLemDataset(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PprodForecast) > 0 {
		i -= len(m.PprodForecast)
		copy(dAtA[i:], m.PprodForecast)
		i = encodeVarintLemDataset(dAtA, i, uint64(len(m.PprodForecast)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PconsForecast) > 0 {
		i -= len(m.PconsForecast)
		copy(dAtA[i:], m.PconsForecast)
		i = encodeVarintLemDataset(dAtA, i, uint64(len(m.PconsForecast)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PprodMeasure) > 0 {
		i -= len(m.PprodMeasure)
		copy(dAtA[i:], m.PprodMeasure)
		i = encodeVarintLemDataset(dAtA, i, uint64(len(m.PprodMeasure)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PconsMeasure) > 0 {
		i -= len(m.PconsMeasure)
		copy(dAtA[i:], m.PconsMeasure)
		i = encodeVarintLemDataset(dAtA, i, uint64(len(m.PconsMeasure)))
		i--
		dAtA[i] = 0x22
	}
	if m.Timestamp != 0 {
		i = encodeVarintLemDataset(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Player) > 0 {
		i -= len(m.Player)
		copy(dAtA[i:], m.Player)
		i = encodeVarintLemDataset(dAtA, i, uint64(len(m.Player)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintLemDataset(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLemDataset(dAtA []byte, offset int, v uint64) int {
	offset -= sovLemDataset(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LemDataset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovLemDataset(uint64(l))
	}
	l = len(m.Player)
	if l > 0 {
		n += 1 + l + sovLemDataset(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovLemDataset(uint64(m.Timestamp))
	}
	l = len(m.PconsMeasure)
	if l > 0 {
		n += 1 + l + sovLemDataset(uint64(l))
	}
	l = len(m.PprodMeasure)
	if l > 0 {
		n += 1 + l + sovLemDataset(uint64(l))
	}
	l = len(m.PconsForecast)
	if l > 0 {
		n += 1 + l + sovLemDataset(uint64(l))
	}
	l = len(m.PprodForecast)
	if l > 0 {
		n += 1 + l + sovLemDataset(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovLemDataset(uint64(l))
	}
	return n
}

func sovLemDataset(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLemDataset(x uint64) (n int) {
	return sovLemDataset(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LemDataset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLemDataset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LemDataset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LemDataset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLemDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLemDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLemDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLemDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLemDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLemDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Player = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLemDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PconsMeasure", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLemDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLemDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLemDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PconsMeasure = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PprodMeasure", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLemDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLemDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLemDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PprodMeasure = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PconsForecast", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLemDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLemDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLemDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PconsForecast = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PprodForecast", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLemDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLemDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLemDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PprodForecast = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLemDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLemDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLemDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLemDataset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLemDataset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLemDataset(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLemDataset
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLemDataset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLemDataset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLemDataset
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLemDataset
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLemDataset
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLemDataset        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLemDataset          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLemDataset = fmt.Errorf("proto: unexpected end of group")
)
