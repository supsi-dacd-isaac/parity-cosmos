// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pm/kpi.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Kpi struct {
	Index   string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Sla     string `protobuf:"bytes,2,opt,name=sla,proto3" json:"sla,omitempty"`
	Rule    string `protobuf:"bytes,3,opt,name=rule,proto3" json:"rule,omitempty"`
	Limit   string `protobuf:"bytes,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Mu      string `protobuf:"bytes,5,opt,name=mu,proto3" json:"mu,omitempty"`
	Penalty int32  `protobuf:"varint,6,opt,name=penalty,proto3" json:"penalty,omitempty"`
	Creator string `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Kpi) Reset()         { *m = Kpi{} }
func (m *Kpi) String() string { return proto.CompactTextString(m) }
func (*Kpi) ProtoMessage()    {}
func (*Kpi) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6d1e7dd0ab0af3d, []int{0}
}
func (m *Kpi) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Kpi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Kpi.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Kpi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kpi.Merge(m, src)
}
func (m *Kpi) XXX_Size() int {
	return m.Size()
}
func (m *Kpi) XXX_DiscardUnknown() {
	xxx_messageInfo_Kpi.DiscardUnknown(m)
}

var xxx_messageInfo_Kpi proto.InternalMessageInfo

func (m *Kpi) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Kpi) GetSla() string {
	if m != nil {
		return m.Sla
	}
	return ""
}

func (m *Kpi) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

func (m *Kpi) GetLimit() string {
	if m != nil {
		return m.Limit
	}
	return ""
}

func (m *Kpi) GetMu() string {
	if m != nil {
		return m.Mu
	}
	return ""
}

func (m *Kpi) GetPenalty() int32 {
	if m != nil {
		return m.Penalty
	}
	return 0
}

func (m *Kpi) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Kpi)(nil), "supsidacdisaac.pm.pm.Kpi")
}

func init() { proto.RegisterFile("pm/kpi.proto", fileDescriptor_f6d1e7dd0ab0af3d) }

var fileDescriptor_f6d1e7dd0ab0af3d = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x90, 0x3f, 0x4f, 0xc3, 0x30,
	0x10, 0xc5, 0xeb, 0xa4, 0x69, 0x85, 0x85, 0x10, 0xb2, 0x3a, 0x78, 0xb2, 0x2a, 0xa6, 0x2e, 0x89,
	0x07, 0x06, 0x76, 0x56, 0x26, 0x3a, 0xb2, 0xb9, 0x8e, 0x05, 0x16, 0x71, 0x7d, 0xf2, 0x1f, 0xa9,
	0xf9, 0x16, 0xec, 0x7c, 0x21, 0xc6, 0x8e, 0x8c, 0x28, 0xf9, 0x22, 0xc8, 0x57, 0x75, 0x39, 0xbd,
	0xdf, 0xbb, 0x7b, 0xc3, 0x3b, 0x7a, 0x0b, 0x4e, 0x7e, 0x82, 0xed, 0x20, 0xf8, 0xe4, 0xd9, 0x26,
	0x66, 0x88, 0xb6, 0x57, 0xba, 0xb7, 0x51, 0x29, 0xdd, 0x81, 0xeb, 0xc0, 0x3d, 0x7c, 0x13, 0x5a,
	0xbf, 0x80, 0x65, 0x1b, 0xda, 0xd8, 0x63, 0x6f, 0x4e, 0x9c, 0x6c, 0xc9, 0xee, 0x66, 0x7f, 0x01,
	0x76, 0x4f, 0xeb, 0x38, 0x28, 0x5e, 0xa1, 0x57, 0x24, 0x63, 0x74, 0x19, 0xf2, 0x60, 0x78, 0x8d,
	0x16, 0xea, 0x92, 0x1d, 0xac, 0xb3, 0x89, 0x2f, 0x2f, 0x59, 0x04, 0x76, 0x47, 0x2b, 0x97, 0x79,
	0x83, 0x56, 0xe5, 0x32, 0xe3, 0x74, 0x0d, 0xe6, 0xa8, 0x86, 0x34, 0xf2, 0xd5, 0x96, 0xec, 0x9a,
	0xfd, 0x15, 0xcb, 0x46, 0x07, 0xa3, 0x92, 0x0f, 0x7c, 0x8d, 0xe7, 0x57, 0x7c, 0x7e, 0xfd, 0x99,
	0x04, 0x39, 0x4f, 0x82, 0xfc, 0x4d, 0x82, 0x7c, 0xcd, 0x62, 0x71, 0x9e, 0xc5, 0xe2, 0x77, 0x16,
	0x8b, 0xb7, 0xa7, 0x77, 0x9b, 0x3e, 0xf2, 0xa1, 0xd3, 0xde, 0x49, 0x2c, 0xd6, 0x96, 0x66, 0x2d,
	0x56, 0x93, 0xa0, 0x82, 0x4d, 0x63, 0xab, 0x7d, 0x74, 0x3e, 0x4a, 0x70, 0xf2, 0x54, 0x46, 0x1a,
	0xc1, 0xc4, 0xc3, 0x0a, 0xbf, 0xf1, 0xf8, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x6f, 0x74, 0xdf,
	0x1d, 0x01, 0x00, 0x00,
}

func (m *Kpi) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Kpi) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Kpi) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintKpi(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Penalty != 0 {
		i = encodeVarintKpi(dAtA, i, uint64(m.Penalty))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Mu) > 0 {
		i -= len(m.Mu)
		copy(dAtA[i:], m.Mu)
		i = encodeVarintKpi(dAtA, i, uint64(len(m.Mu)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Limit) > 0 {
		i -= len(m.Limit)
		copy(dAtA[i:], m.Limit)
		i = encodeVarintKpi(dAtA, i, uint64(len(m.Limit)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Rule) > 0 {
		i -= len(m.Rule)
		copy(dAtA[i:], m.Rule)
		i = encodeVarintKpi(dAtA, i, uint64(len(m.Rule)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sla) > 0 {
		i -= len(m.Sla)
		copy(dAtA[i:], m.Sla)
		i = encodeVarintKpi(dAtA, i, uint64(len(m.Sla)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintKpi(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintKpi(dAtA []byte, offset int, v uint64) int {
	offset -= sovKpi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Kpi) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovKpi(uint64(l))
	}
	l = len(m.Sla)
	if l > 0 {
		n += 1 + l + sovKpi(uint64(l))
	}
	l = len(m.Rule)
	if l > 0 {
		n += 1 + l + sovKpi(uint64(l))
	}
	l = len(m.Limit)
	if l > 0 {
		n += 1 + l + sovKpi(uint64(l))
	}
	l = len(m.Mu)
	if l > 0 {
		n += 1 + l + sovKpi(uint64(l))
	}
	if m.Penalty != 0 {
		n += 1 + sovKpi(uint64(m.Penalty))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovKpi(uint64(l))
	}
	return n
}

func sovKpi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKpi(x uint64) (n int) {
	return sovKpi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Kpi) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKpi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Kpi: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Kpi: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKpi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKpi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKpi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sla", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKpi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKpi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKpi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sla = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKpi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKpi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKpi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKpi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKpi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKpi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Limit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKpi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKpi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKpi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Penalty", wireType)
			}
			m.Penalty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKpi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Penalty |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKpi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKpi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKpi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKpi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKpi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKpi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKpi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKpi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKpi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKpi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKpi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKpi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKpi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKpi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKpi = fmt.Errorf("proto: unexpected end of group")
)
